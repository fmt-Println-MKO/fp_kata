// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dsmodels "fp_kata/internal/datasources/dsmodels"

	mock "github.com/stretchr/testify/mock"
)

// PaymentsDatasource is an autogenerated mock type for the PaymentsDatasource type
type PaymentsDatasource struct {
	mock.Mock
}

// AllByOrderId provides a mock function with given fields: ctx, paymentId
func (_m *PaymentsDatasource) AllByOrderId(ctx context.Context, paymentId int) ([]dsmodels.Payment, error) {
	ret := _m.Called(ctx, paymentId)

	var r0 []dsmodels.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]dsmodels.Payment, error)); ok {
		return rf(ctx, paymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []dsmodels.Payment); ok {
		r0 = rf(ctx, paymentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dsmodels.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, payment
func (_m *PaymentsDatasource) Create(ctx context.Context, payment dsmodels.Payment) (dsmodels.Payment, error) {
	ret := _m.Called(ctx, payment)

	var r0 dsmodels.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dsmodels.Payment) (dsmodels.Payment, error)); ok {
		return rf(ctx, payment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dsmodels.Payment) dsmodels.Payment); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Get(0).(dsmodels.Payment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dsmodels.Payment) error); ok {
		r1 = rf(ctx, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, paymentId
func (_m *PaymentsDatasource) Delete(ctx context.Context, paymentId int) error {
	ret := _m.Called(ctx, paymentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, paymentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, paymentId
func (_m *PaymentsDatasource) Read(ctx context.Context, paymentId int) (dsmodels.Payment, error) {
	ret := _m.Called(ctx, paymentId)

	var r0 dsmodels.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (dsmodels.Payment, error)); ok {
		return rf(ctx, paymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) dsmodels.Payment); ok {
		r0 = rf(ctx, paymentId)
	} else {
		r0 = ret.Get(0).(dsmodels.Payment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, payment
func (_m *PaymentsDatasource) Update(ctx context.Context, payment dsmodels.Payment) (dsmodels.Payment, error) {
	ret := _m.Called(ctx, payment)

	var r0 dsmodels.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dsmodels.Payment) (dsmodels.Payment, error)); ok {
		return rf(ctx, payment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dsmodels.Payment) dsmodels.Payment); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Get(0).(dsmodels.Payment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dsmodels.Payment) error); ok {
		r1 = rf(ctx, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentsDatasource creates a new instance of PaymentsDatasource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentsDatasource(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentsDatasource {
	mock := &PaymentsDatasource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
