// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dsmodels "fp_kata/internal/datasources/dsmodels"

	mock "github.com/stretchr/testify/mock"
)

// UsersDatasource is an autogenerated mock type for the UsersDatasource type
type UsersDatasource struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *UsersDatasource) Create(ctx context.Context, user dsmodels.User) (dsmodels.User, bool) {
	ret := _m.Called(ctx, user)

	var r0 dsmodels.User
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, dsmodels.User) (dsmodels.User, bool)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dsmodels.User) dsmodels.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(dsmodels.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dsmodels.User) bool); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UsersDatasource) Delete(ctx context.Context, id int) bool {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, id
func (_m *UsersDatasource) Read(ctx context.Context, id int) (dsmodels.User, bool) {
	ret := _m.Called(ctx, id)

	var r0 dsmodels.User
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) (dsmodels.User, bool)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) dsmodels.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dsmodels.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) bool); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, user
func (_m *UsersDatasource) Update(ctx context.Context, id int, user dsmodels.User) bool {
	ret := _m.Called(ctx, id, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int, dsmodels.User) bool); ok {
		r0 = rf(ctx, id, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewUsersDatasource creates a new instance of UsersDatasource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersDatasource(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersDatasource {
	mock := &UsersDatasource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
