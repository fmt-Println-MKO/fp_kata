// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "fp_kata/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// PaymentsService is an autogenerated mock type for the PaymentsService type
type PaymentsService struct {
	mock.Mock
}

// GetPaymentByID provides a mock function with given fields: ctx, id
func (_m *PaymentsService) GetPaymentByID(ctx context.Context, id int) (*models.Payment, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Payment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Payment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentsByOrder provides a mock function with given fields: ctx, orderId
func (_m *PaymentsService) GetPaymentsByOrder(ctx context.Context, orderId int) ([]*models.Payment, error) {
	ret := _m.Called(ctx, orderId)

	var r0 []*models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Payment, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Payment); ok {
		r0 = rf(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StorePayment provides a mock function with given fields: ctx, payment
func (_m *PaymentsService) StorePayment(ctx context.Context, payment models.Payment) (*models.Payment, error) {
	ret := _m.Called(ctx, payment)

	var r0 *models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Payment) (*models.Payment, error)); ok {
		return rf(ctx, payment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Payment) *models.Payment); ok {
		r0 = rf(ctx, payment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Payment) error); ok {
		r1 = rf(ctx, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentsService creates a new instance of PaymentsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentsService {
	mock := &PaymentsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
