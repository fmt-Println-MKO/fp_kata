// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "fp_kata/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// OrdersService is an autogenerated mock type for the OrdersService type
type OrdersService struct {
	mock.Mock
}

// GetOrder provides a mock function with given fields: ctx, userId, id
func (_m *OrdersService) GetOrder(ctx context.Context, userId int, id int) (*models.Order, error) {
	ret := _m.Called(ctx, userId, id)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*models.Order, error)); ok {
		return rf(ctx, userId, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *models.Order); ok {
		r0 = rf(ctx, userId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrders provides a mock function with given fields: ctx, userId
func (_m *OrdersService) GetOrders(ctx context.Context, userId int) ([]*models.Order, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*models.Order, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*models.Order); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersWithFilter provides a mock function with given fields: ctx, userId, filter
func (_m *OrdersService) GetOrdersWithFilter(ctx context.Context, userId int, filter func(*models.Order) bool) ([]*models.Order, error) {
	ret := _m.Called(ctx, userId, filter)

	var r0 []*models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, func(*models.Order) bool) ([]*models.Order, error)); ok {
		return rf(ctx, userId, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, func(*models.Order) bool) []*models.Order); ok {
		r0 = rf(ctx, userId, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, func(*models.Order) bool) error); ok {
		r1 = rf(ctx, userId, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreOrder provides a mock function with given fields: ctx, userId, order
func (_m *OrdersService) StoreOrder(ctx context.Context, userId int, order models.Order) (*models.Order, error) {
	ret := _m.Called(ctx, userId, order)

	var r0 *models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, models.Order) (*models.Order, error)); ok {
		return rf(ctx, userId, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, models.Order) *models.Order); ok {
		r0 = rf(ctx, userId, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, models.Order) error); ok {
		r1 = rf(ctx, userId, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrdersService creates a new instance of OrdersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrdersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrdersService {
	mock := &OrdersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
