// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"fp_kata/common/middleware"
	"fp_kata/internal/controllers"
	"fp_kata/internal/datasources/file"
	"fp_kata/internal/datasources/yugabyte"
	"fp_kata/internal/services"
	"github.com/gofiber/fiber/v3"
	"github.com/google/wire"
)

// Injectors from wire.go:

// InitializeAppModules wires up the entire application in one go.
func InitializeAppModules() *AppModules {
	authService := services.NewAuthService()
	usersDatasource := file.NewUsersStorage()
	usersService := services.NewUsersService(usersDatasource, authService)
	v := middleware.AuthMiddleware(authService, usersService)
	usersController := controllers.NewUsersController(usersService)
	ordersDatasource := file.NewOrdersStorage()
	paymentsDatasource := yugabyte.NewPaymentsStorage()
	paymentsService := services.NewPaymentsService(paymentsDatasource)
	ordersService := services.NewOrdersService(ordersDatasource, paymentsService)
	ordersController := controllers.NewOrdersController(ordersService)
	appModules := newAppModules(v, usersController, ordersController)
	return appModules
}

// wire.go:

type AppModules struct {
	AuthMiddleware   fiber.Handler
	UsersController  controllers.UsersController
	OrdersController controllers.OrdersController
}

// Define a ProviderSet that provides AuthService once.
var AppModulesSet = wire.NewSet(file.NewOrdersStorage, file.NewUsersStorage, yugabyte.NewPaymentsStorage, services.NewAuthService, services.NewUsersService, services.NewPaymentsService, services.NewOrdersService, controllers.NewUsersController, controllers.NewOrdersController, middleware.AuthMiddleware, newAppModules)

// newAppModules ties together all the pieces into a single struct.
func newAppModules(
	authMW fiber.Handler,
	usersCtrl controllers.UsersController,
	ordersCtrl controllers.OrdersController,
) *AppModules {
	return &AppModules{
		AuthMiddleware:   authMW,
		UsersController:  usersCtrl,
		OrdersController: ordersCtrl,
	}
}
